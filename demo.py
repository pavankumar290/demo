# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SkSiVYJdkU_caRK6KWreMYQ8iohCGt2g
"""
# programm to find wheather the given number is odd or even
X = int(input("enter a integer"))
if X%2 == 0:
  print("even")
else:
  print("odd")
# program to find wheather the given number is positive or negative or zero
x = int(input("enter a number"))
if x>0:
  print("positive")
elif x<0:
  print("negative")
else:
  print("zero")
# program to find weather the given number is leap year or not
year = int(input("enter year"))
if year%4 == 0:
  if year%100 != 0:
     if year%400 == 0:
      print("leap year")
else:
  print("not a leap year")
#program to find the maximum number among the given values
X = int(input("Enter the first number"))
Y = int(input("Enter the second number"))
Z = int(input("Enter the third number"))
if X >= Y and X >= Z:
    largest = X
elif Y >= X and Y >= Z:
    largest = X
else:
    largest = Z
print("The largest number ", largest)
#program to find the grade
X = int(input("Enter the score (0-100)"))

if 90 <= X <= 100:
    grade = "A"
elif 80 <= X< 90:
    grade = "B"
elif 70 <= X < 80:
    grade = "C"
elif 60 <= X < 70:
    grade = "D"
elif 0 <= X < 60:
    grade = "F"
print("Grade", grade)
# program for finding wheather the given char is vowel or consonant
char = input("Enter a character")

if char.lower() in 'aeiou':
    print(char, "is a vowel")
else:
    print(char, "is a consonant")
#program to find Number is in Range or not
number = int(input("Enter a number"))
start_range = int(input("Enter the start of the range"))
end_range = int(input("Enter the end of the range"))
if start_range <= number <= end_range:
    print("In range")
else:
    print("Out of range")
# program to check Even Division 
X = int(input("Enter the first number"))
Y = int(input("Enter the second number"))

if X % Y == 0:
    print(X, "is divisible by", Y)
else:
    remainder = X % Y
    print(X, "is not divisible by", Y)
    print("remainder")
#program to find weather the person the eligible for vote or not
age = int(input("Enter your age "))
if age >= 18:
    print("You are eligible to vote")
else:
    print("You are not eligible to vote ")
#to find smallest number
X = int(input("Enter the first number"))
Y = int(input("Enter the second number"))
Z = int(input("Enter the third number:"))

if X <= Y and X <= Z:
    smallest = X
elif Y <= X and Y <= Z:
    smallest = Y
else:
    smallest = Z

print("The smallest number ", smallest)
#program to find the length of city name
city = ["Miami", "Orlando", "Tampa"]
for i in city:
    print(len(i))
#program to find avg length of flavors
flavors = ["Vanilla", "Chocolate", "Strawberry", "Salted Caramel", "Matcha",
           "Cookies & Cream", "Rainbow Sherbet", "Bubblegum", "Cotton Candy",
           "Mango", "Pineapple-Coconut", "Key Lime Pie"]
total_length = sum(len(flavor) for flavor in flavors)
average_length = total_length / len(flavors)
print( average_length)
#sorting the giving flavors
flavors = ["Vanilla", "Chocolate", "Strawberry", "Salted Caramel", "Matcha",
           "Cookies & Cream", "Rainbow Sherbet", "Bubblegum", "Cotton Candy",
           "Mango", "Pineapple-Coconut", "Key Lime Pie"]
sorted_flavors = sorted(flavors)
print(sorted_flavors)
#finding the tost cost of the icecream for selected 3 toppings
topping_prices = {
    "Sprinkles": 0.50,
    "Chocolate Chips": 0.75,
    "Whipped Cream": 1.00,
    "Gummy Bears": 1.25,
    "Cherries": 0.60
}

topping = ["Chocolate Chips", "Whipped Cream", "Gummy Bears"]
prices = [topping_prices[t] for t in topping]
total_cost = sum(prices)
print(total_cost) 
#finding the most expensive least expensive ice cream
base_prices = (("Vanilla", 3.00), ("Chocolate", 3.50), ("Strawberry", 3.25), ("Mint Chocolate Chip", 3.75))
most_expensive = max(base_prices, key=lambda item: item[1])
least_expensive = min(base_prices, key=lambda item: item[1])
print( most_expensive)
print(least_expensive)

#program for Write a function summarize_items that performs the following:
#Accepts at least one positional argument, which is the name of the person.
#Accepts an arbitrary number of items (e.g., integers, strings, etc.) using *args.
#Accepts arbitrary keyword arguments (e.g., metadata like date or location) using **kwargs.
#The function should:
#Print the personâ€™s name.
#Print the total number of items passed via *args.
# Return a dict with all items in keywards args

def my_function(name,*arg,**kwargs):
  print(name)
  print(len(arg))
  print(kwargs)
my_function("pavan",1,id=1,full_name="pavan")
